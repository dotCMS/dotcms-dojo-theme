// TODO: fix when no shadow it's provide.

.dijitButton,
.dijitToggleButton,
.dijitComboButton {
  .dijitButtonNode {
    border: none;
  }
}

.dijitButton,
.dijitToggleButton {
  .dijitButtonNode {
    padding-left: $button-padding;
  }
}

.dijitComboButton .dijitStretch {
  padding-left: $button-padding;
}

.dijitButton,
.dijitComboBox,
.dijitComboButton,
.dijitDropDownButton,
.dijitToggleButton {
  margin: 0;
}

.dijitButton,
.dijitToggleButton {
  padding-right: $button-padding;
}

.dijitButton,
.dijitToggleButton {
  .dijitButtonText {
    line-height: $field-height - 2px;
    height: $field-height - 2px; // Need to substract the border (top and bottom)
  }
}

.dijit {
  &Button {
    @include btn(1, $button-normal-bgcolor, $button-normal-border, $button-normal-textcolor);

    // TODO: we have to remove this in the HTML
    .dijitIcon {
      display: none;
    }

    &Hover {
      @include btn(2, $button-hover-bgcolor, $button-hover-border, $button-hover-textcolor);
    }

    &Focused {
      @include btn(1, $button-active-bgcolor, $button-active-border, $button-active-textcolor);
    }

    &Disabled {
      @include btn(none, $button-disabled-bgcolor, $button-disabled-border, $button-disabled-textcolor);
    }
  }

  &DropDownButton {
    @include btn(1, $dropdownbutton-normal-bgcolor, $dropdownbutton-normal-border, $dropdownbutton-normal-textcolor);

    .dijitButtonNode {
      border: none;
      padding-left: $button-padding;
    }

    .dijitArrowButtonInner {
      width: $dropdownbutton-arrow-container-size;

      @if $dropdownbutton-normal-arrow-bgcolor != 'transparent' {
        // TODO: write this mixin
        background-color: $dropdownbutton-normal-arrow-bgcolor;
      }

      &:before {
        @if $dropdownbutton-normal-arrow-url {
          background-image: url($dropdownbutton-normal-arrow-url);
        } @else {
          @include create-arrow($dropdownbutton-arrow-size, $dropdownbutton-normal-arrow-color);
        }
      }
    }

    &Hover {
      @include btn(2, $dropdownbutton-hover-bgcolor, $dropdownbutton-hover-border, $dropdownbutton-hover-textcolor);

      .dijitArrowButtonInner {
        @if $dropdownbutton-hover-arrow-bgcolor != 'transparent' {
          background-color: $dropdownbutton-hover-arrow-bgcolor;
        }

        &:before {
          @if $dropdownbutton-hover-arrow-url {
            background-image: url($dropdownbutton-hover-arrow-url);
          } @else {
            @include create-arrow($dropdownbutton-arrow-size, $dropdownbutton-hover-arrow-color);
          }
        }
      }
    }

    &Active {
      @include btn(1, $dropdownbutton-active-bgcolor, $dropdownbutton-active-border, $dropdownbutton-active-textcolor);

      .dijitArrowButtonInner {
        @if $dropdownbutton-active-arrow-bgcolor != 'transparent' {
          background-color: $dropdownbutton-active-arrow-bgcolor;
        }

        &:before {
          @if $dropdownbutton-active-arrow-url {
            background-image: url($dropdownbutton-active-arrow-url);
          } @else {
            @include create-arrow($dropdownbutton-arrow-size, $dropdownbutton-active-arrow-color);
          }
        }
      }
    }

    &Focused {
      @include btn(1, $dropdownbutton-focused-bgcolor, $dropdownbutton-focused-border, $dropdownbutton-focused-textcolor);
    }

    &Disabled {
      @include btn(none, $dropdownbutton-disabled-bgcolor, $dropdownbutton-disabled-border, $dropdownbutton-disabled-textcolor);

      .dijitArrowButtonInner {
        @if $dropdownbutton-disabled-arrow-bgcolor != 'transparent' {
          background-color: $dropdownbutton-disabled-arrow-bgcolor;
        }

        &:before {
          @if $dropdownbutton-disabled-arrow-url {
            background-image: url($dropdownbutton-disabled-arrow-url);
          } @else {
            @include create-arrow($dropdownbutton-arrow-size, $dropdownbutton-disabled-arrow-color);
          }
        }
      }
    }
  }

  &ComboButton {
    @include btn(1, $combobutton-normal-bgcolor, $combobutton-normal-border, $combobutton-normal-textcolor);

    .dijitArrowButtonInner {
      border-left: $combobutton-normal-arrow-border;
      width: $combobutton-arrow-container-size;

      @if $combobutton-normal-arrow-bgcolor != 'transparent' {
        // TODO: write this mixin
        background-color: $combobutton-normal-arrow-bgcolor;
      }

      &:before {
        @if $combobutton-normal-arrow-url {
          background-image: url($combobutton-normal-arrow-url);
        } @else {
          @include create-arrow($combobutton-arrow-size, $combobutton-normal-arrow-color);
        }
      }
    }

    &Hover {
      @include btn(2, $combobutton-hover-bgcolor, $combobutton-hover-border, $combobutton-hover-textcolor);

      .dijitArrowButtonInner {
        border-left: $combobutton-hover-arrow-border;

        @if $combobutton-hover-arrow-bgcolor != 'transparent' {
          background-color: $combobutton-hover-arrow-bgcolor;
        }

        &:before {
          @if $combobutton-hover-arrow-url {
            background-image: url($combobutton-hover-arrow-url);
          } @else {
            @include create-arrow($combobutton-arrow-size, $combobutton-hover-arrow-color);
          }
        }
      }
    }

    &Active {
      @include btn(1, $combobutton-active-bgcolor, $combobutton-active-border, $combobutton-active-textcolor);

      .dijitArrowButtonInner {
        border-left: $combobutton-active-arrow-border;

        @if $combobutton-active-arrow-bgcolor != 'transparent' {
          background-color: $combobutton-active-arrow-bgcolor;
        }

        &:before {
          @if $combobutton-active-arrow-url {
            background-image: url($combobutton-active-arrow-url);
          } @else {
            @include create-arrow($combobutton-arrow-size, $combobutton-active-arrow-color);
          }
        }
      }
    }

    &Focused,
    &HoverFocused {
      @include btn(1, $combobutton-focused-bgcolor, $combobutton-focused-border, $combobutton-focused-textcolor);

      .dijitArrowButtonInner {
        border-left: $combobutton-focused-arrow-border;

        @if $combobutton-focused-arrow-bgcolor != 'transparent' {
          background-color: $combobutton-focused-arrow-bgcolor;
        }

        &:before {
          @if $combobutton-focused-arrow-url {
            background-image: url($combobutton-focused-arrow-url);
          } @else {
            @include create-arrow($combobutton-arrow-size, $combobutton-focused-arrow-color);
          }
        }
      }
    }

    &Disabled {
      @include btn(none, $combobutton-disabled-bgcolor, $combobutton-disabled-border, $combobutton-disabled-textcolor);

      .dijitArrowButtonInner {
        border-left: $combobutton-disabled-arrow-border;

        @if $combobutton-disabled-arrow-bgcolor != 'transparent' {
          background-color: $combobutton-disabled-arrow-bgcolor;
        }

        &:before {
          @if $combobutton-disabled-arrow-url {
            background-image: url($combobutton-disabled-arrow-url);
          } @else {
            @include create-arrow($combobutton-arrow-size, $combobutton-disabled-arrow-color);
          }
        }
      }
    }
  }

  &ToggleButton {
    @include btn(1, $togglebutton-normal-bgcolor, $togglebutton-normal-border, $togglebutton-normal-textcolor);

    .dijitIcon {
      visibility: hidden;
    }

    &Focused,
    &Checked {
      @include btn(1, $togglebutton-active-bgcolor, $togglebutton-active-border, $togglebutton-active-textcolor);
    }

    &Hover,
    &HoverFocused {
      @include btn(2, $togglebutton-hover-bgcolor, $togglebutton-hover-border, $togglebutton-hover-textcolor);
    }

    &Checked {
      .dijitIcon {
        visibility: visible;
      }
    }

    &Disabled {
      @include btn(none, $togglebutton-disabled-bgcolor, $togglebutton-disabled-border, $togglebutton-disabled-textcolor);
    }
  }
}
